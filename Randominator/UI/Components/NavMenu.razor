@using TehGM.Randominator.Features.Player
@inject NavigationManager Navigation
@inject IRandomizer Randomizer
@inject IPlayerRefresher PlayerRefresher
@inject IOptions<PlayerOptions> PlayerOptions
@inject IWebAssemblyHostEnvironment Environment
@inject IUserSettingsProvider SettingsProvider
@implements IDisposable

<div class="nav-menu">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="">@AppInfo.Name v@(AppInfo.Version)</a>
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>
    
    <div class="nav-menu-items @this.NavMenuClass">
        <nav class="flex-column">
            <div class="nav-item px-3" @onclick="ToggleNavMenu">
                <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </div>
            @if (this._showPlayer)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link rainbow-text" href="player/" @onclick="OnPlayerClicked">
                        <span class="bi bi-youtube" aria-hidden="true"></span> Player
                    </NavLink>
                </div>
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="settings/">
                    <span class="oi oi-cog" aria-hidden="true"></span> Settings
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="about/">
                    <span class="oi oi-info" aria-hidden="true"></span> About
                </NavLink>
            </div>

            @if (this.ShouldShowAnyGenerators())
            {
                <hr/>
            }

            @* meme generators *@
            @if (this.ShouldShowFunnyGenerators())
            {
                <div class="nav-item px-3">
                    <a class="nav-link" @onclick="ToggleFunnyGenerators">
                         <span class="bi bi-hypnotize" aria-hidden="true"></span> Funny Generators
                    </a>
                </div>
                if (this._settings.Menu.ShowMobileGameNameGenerator)
                {
                    <div class="nav-item px-3 @this.FunnyGeneratorsClass">
                        <NavLink class="nav-link" href="generators/mobile-game-name/">
                             <span class="bi bi-hypnotize" aria-hidden="true"></span> Mobile Game Name
                        </NavLink>
                    </div>
                }
                if (this._settings.Menu.ShowDareGenerator)
                {
                    <div class="nav-item px-3 @this.FunnyGeneratorsClass">
                        <NavLink class="nav-link" href="generators/dare/">
                             <span class="bi bi-hypnotize" aria-hidden="true"></span> Dare
                        </NavLink>
                    </div>
                }
                <div class="nav-item px-3 @this.FunnyGeneratorsClass">
                    <NavLink class="nav-link" href="generators/book-title/">
                        <span class="bi bi-book" aria-hidden="true"></span> Book Title
                    </NavLink>
                </div>
                if (this._settings.Menu.ShowProgrammingStandardsGenerator)
                {
                    <div class="nav-item px-3 @this.FunnyGeneratorsClass">
                        <NavLink class="nav-link" href="generators/programming-standards/">
                             <span class="bi bi-hypnotize" aria-hidden="true"></span> Programming Standards
                        </NavLink>
                    </div>
                }
            }

            @* utility generators *@
            @if (this.ShouldShowUtilityGenerators())
            {
                <div class="nav-item px-3">
                    <a class="nav-link" @onclick="ToggleUtilityGenerators">
                        <span class="bi bi-tools" aria-hidden="true"></span> Utility Generators
                    </a>
                </div>
                if (this._settings.Menu.ShowUniqueIdGenerator)
                {
                    <div class="nav-item px-3 @this.UtilityGeneratorsClass">
                        <NavLink class="nav-link" href="generators/unique-id/">
                            <span class="bi bi-gear-wide-connected" aria-hidden="true"></span> Unique ID
                        </NavLink>
                    </div>
                }
            }

            @* debug utils *@
            @if (this.Environment.IsDevelopment())
            {
                <hr/>
                <div class="nav-item px-3">
                    <a class="nav-link" @onclick="ToggleDebugUtils">
                         <span class="bi bi-tools" aria-hidden="true"></span> Debug Utilities
                    </a>
                </div>
                <div class="nav-item px-3 @this.DebugUtilsClass">
                    <NavLink class="nav-link" href="debug/randomizer-distribution/">
                         <span class="bi bi-gear-wide-connected" aria-hidden="true"></span> Randomizer Distribution Test
                    </NavLink>
                </div>
            }
        </nav>
    
    </div>

    <div class="copyright @this.NavMenuClass">
        <p>
            <InlineCopyright/>
        </p>
    </div>
</div>


@code {
    private bool _collapseNavMenu = true;
    private bool _collapseFunnyGenerators = false;
    private bool _collapseUtilityGenerators = false;
    private bool _collapseDebugUtils = false;
    private bool _showPlayer;

    private UserSettings _settings = new UserSettings();

    private string NavMenuClass => this._collapseNavMenu ? "collapse" : string.Empty;
    private string FunnyGeneratorsClass => this._collapseFunnyGenerators ? "sub-item hidden" : "sub-item";
    private string UtilityGeneratorsClass => this._collapseUtilityGenerators ? "sub-item hidden" : "sub-item";
    private string DebugUtilsClass => this._collapseDebugUtils ? "sub-item hidden" : "sub-item";

    protected override async Task OnInitializedAsync()
    {
        this.OnUserSettingsChanged(await this.SettingsProvider.GetAsync());
        this._showPlayer = this.Randomizer.RollChance(this.PlayerOptions.Value.PlayerAppearChance);
        this.Navigation.LocationChanged += OnLocationChanged;
        this.SettingsProvider.Changed += OnUserSettingsChanged;
        await base.OnInitializedAsync();
    }

    private void ToggleNavMenu()
        => this._collapseNavMenu = !this._collapseNavMenu;

    private void ToggleFunnyGenerators()
        => this._collapseFunnyGenerators = !this._collapseFunnyGenerators;

    private void ToggleUtilityGenerators()
        => this._collapseUtilityGenerators = !this._collapseUtilityGenerators;

    private void ToggleDebugUtils()
        => this._collapseDebugUtils = !this._collapseDebugUtils;

    private void OnPlayerClicked()
        => this.PlayerRefresher.Refresh();

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        this._collapseNavMenu = true;
        base.StateHasChanged();
    }

    private void OnUserSettingsChanged(UserSettings settings)
    {
        this._settings = settings;
        this.StateHasChanged();
    }

    private bool ShouldShowFunnyGenerators()
        => this._settings.Menu.ShowMobileGameNameGenerator || this._settings.Menu.ShowDareGenerator || this._settings.Menu.ShowProgrammingStandardsGenerator;

    private bool ShouldShowUtilityGenerators()
        => this._settings.Menu.ShowUniqueIdGenerator;

    private bool ShouldShowAnyGenerators()
        => this.ShouldShowFunnyGenerators() || this.ShouldShowUtilityGenerators();

    void IDisposable.Dispose()
    {
        this.SettingsProvider.Changed -= OnUserSettingsChanged;
        this.Navigation.LocationChanged -= OnLocationChanged;
    }
}
